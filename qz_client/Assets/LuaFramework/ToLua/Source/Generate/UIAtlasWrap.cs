//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UIAtlasWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UIAtlas), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("GetSprite", GetSprite);
		L.RegFunction("GetRandomSprite", GetRandomSprite);
		L.RegFunction("MarkSpriteListAsChanged", MarkSpriteListAsChanged);
		L.RegFunction("SortAlphabetically", SortAlphabetically);
		L.RegFunction("GetListOfSprites", GetListOfSprites);
		L.RegFunction("CheckIfRelated", CheckIfRelated);
		L.RegFunction("MarkAsChanged", MarkAsChanged);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("spriteMaterial", get_spriteMaterial, set_spriteMaterial);
		L.RegVar("premultipliedAlpha", get_premultipliedAlpha, null);
		L.RegVar("spriteList", get_spriteList, set_spriteList);
		L.RegVar("texture", get_texture, null);
		L.RegVar("pixelSize", get_pixelSize, set_pixelSize);
		L.RegVar("replacement", get_replacement, set_replacement);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSprite(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIAtlas obj = (UIAtlas)ToLua.CheckObject<UIAtlas>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			UISpriteData o = obj.GetSprite(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRandomSprite(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIAtlas obj = (UIAtlas)ToLua.CheckObject<UIAtlas>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string o = obj.GetRandomSprite(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MarkSpriteListAsChanged(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIAtlas obj = (UIAtlas)ToLua.CheckObject<UIAtlas>(L, 1);
			obj.MarkSpriteListAsChanged();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SortAlphabetically(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIAtlas obj = (UIAtlas)ToLua.CheckObject<UIAtlas>(L, 1);
			obj.SortAlphabetically();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetListOfSprites(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UIAtlas obj = (UIAtlas)ToLua.CheckObject<UIAtlas>(L, 1);
				BetterList<string> o = obj.GetListOfSprites();
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2)
			{
				UIAtlas obj = (UIAtlas)ToLua.CheckObject<UIAtlas>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				BetterList<string> o = obj.GetListOfSprites(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIAtlas.GetListOfSprites");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckIfRelated(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIAtlas arg0 = (UIAtlas)ToLua.CheckObject<UIAtlas>(L, 1);
			UIAtlas arg1 = (UIAtlas)ToLua.CheckObject<UIAtlas>(L, 2);
			bool o = UIAtlas.CheckIfRelated(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MarkAsChanged(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIAtlas obj = (UIAtlas)ToLua.CheckObject<UIAtlas>(L, 1);
			obj.MarkAsChanged();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_spriteMaterial(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIAtlas obj = (UIAtlas)o;
			UnityEngine.Material ret = obj.spriteMaterial;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index spriteMaterial on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_premultipliedAlpha(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIAtlas obj = (UIAtlas)o;
			bool ret = obj.premultipliedAlpha;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index premultipliedAlpha on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_spriteList(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIAtlas obj = (UIAtlas)o;
			System.Collections.Generic.List<UISpriteData> ret = obj.spriteList;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index spriteList on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_texture(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIAtlas obj = (UIAtlas)o;
			UnityEngine.Texture ret = obj.texture;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index texture on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_pixelSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIAtlas obj = (UIAtlas)o;
			float ret = obj.pixelSize;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index pixelSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_replacement(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIAtlas obj = (UIAtlas)o;
			UIAtlas ret = obj.replacement;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index replacement on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_spriteMaterial(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIAtlas obj = (UIAtlas)o;
			UnityEngine.Material arg0 = (UnityEngine.Material)ToLua.CheckObject<UnityEngine.Material>(L, 2);
			obj.spriteMaterial = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index spriteMaterial on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_spriteList(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIAtlas obj = (UIAtlas)o;
			System.Collections.Generic.List<UISpriteData> arg0 = (System.Collections.Generic.List<UISpriteData>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<UISpriteData>));
			obj.spriteList = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index spriteList on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_pixelSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIAtlas obj = (UIAtlas)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.pixelSize = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index pixelSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_replacement(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIAtlas obj = (UIAtlas)o;
			UIAtlas arg0 = (UIAtlas)ToLua.CheckObject<UIAtlas>(L, 2);
			obj.replacement = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index replacement on a nil value");
		}
	}
}

